{
  "compilerOptions": {
    "allowJs": true,  // 允许编译器编译JS，JSX文件
    "baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      "@/*": ["src/*"],
    },
    "target": "ESNext", // 目标语言的版本
    "useDefineForClassFields": true, // 标志用作迁移到即将推出的类字段标准版本的一部分，默认：false。
    "module": "ESNext", // 生成代码的模板标准
    "moduleResolution": "Node", // // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "strict": false,// 是否启动所有严格检查的总开关，默认：false，启动后将开启所有的严格检查选项
    "jsx": "preserve",  // 指定 jsx 格式
    "resolveJsonModule": true,  // 是否解析 JSON 模块，默认：false。
    "isolatedModules": true, // 是否将每个文件转换为单独的模块，默认：false。
    "esModuleInterop": true, // 是否通过为所有导入模块创建命名空间对象，允许CommonJS和ES模块之间的互操作性，开启改选项时，也自动开启allowSyntheticDefaultImports选项，默认：false。
    "lib": ["ESNext", "DOM"], // 指定项目运行时使用的库。
    "skipLibCheck": true,  // 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间，默认：false。
    "noEmit": true ,
  },
  "include": ["src/**/*.ts", "src/**/**/*.ts","src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue","src/**/**/*.vue","./components.d.ts", "src/utils/request.js", "src/utils/request.js", ".eslintrc.cjs", "vite.config.ts"], // 解析的文件
  "references": [{ "path": "./tsconfig.node.json" }], // 项目引用，是TS3.0 中的一项新功能，它允许将 TS程序组织成更小的部分。
  "exclude": [
    "node_modeules",
    "dist"
  ]
}
